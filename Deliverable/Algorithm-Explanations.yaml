algorithm_explanation:
  algorithms:
    - name: "Nearest Neighbor Heuristic"
      purpose: >
        Quickly generate an initial set of routes for trucks by prioritizing the
        nearest unvisited customer. This approach ensures computational efficiency
        and provides a foundation for further optimization.
      usage:
        when: "Used during the initialization phase to create basic routes."
        why: >
          Provides a fast solution for simple logistics problems or as a starting
          point for more complex methods.
        how: >
          Begins at the depot, identifies the nearest customer, serves them,
          and continues until the truck reaches its capacity or all customers
          are visited.
      limitations: 
        - "Does not guarantee global optimality."
        - "May perform poorly for large, complex networks or uneven demand distributions."
    - name: "Sweep Algorithm"
      purpose: >
        Group customers into geographically close clusters and optimize routes within
        each cluster. Simplifies route optimization by breaking it into smaller sub-problems.
      usage:
        when: >
          Best suited for scenarios with multiple delivery vehicles and evenly distributed customers.
        why: >
          Reduces computational complexity by dividing the problem into manageable zones.
        how: >
          Converts customer coordinates to polar form, uses a sweeping ray from the depot to
          assign customers to clusters based on vehicle capacity, and solves a smaller TSP for each cluster.
      limitations:
        - "Clusters depend heavily on initial angle and distance calculations."
        - "Less effective for highly dispersed customer locations."
    - name: "2-opt Improvement Heuristic"
      purpose: >
        Refine existing routes by swapping two edges in the route to reduce overall distance.
        Used to improve routes generated by Nearest Neighbor or Sweep Algorithm.
      usage:
        when: >
          Applied as a post-processing step after initial routes are generated.
        why: >
          Increases efficiency of existing routes by systematically testing and implementing better paths.
        how: >
          Iteratively checks all pairs of edges in a route and swaps them if it results
          in a shorter overall distance.
      limitations:
        - "Computationally intensive for large routes."
        - "May get stuck in local optima without additional global optimization."
  implementation_details:
    shared_inputs:
      - "Distance Matrix: Distances between depot, customers, and between customers."
      - "Customer Demands: Delivery requirements of each customer."
      - "Truck Capacities: Maximum load each truck can carry."
    outputs:
      - "Optimized routes for each truck."
      - "Estimated travel distances and times."
    tools_and_libraries:
      - "NumPy: For distance matrix operations."
      - "Pandas: For data handling and visualization."
      - "Google OR-Tools: For solving the Traveling Salesman Problem (TSP) and Vehicle Routing Problem (VRP)."
  summary:
    value_proposition: >
      These algorithms work together to provide a scalable, modular approach to solving
      route optimization problems. By combining the fast heuristics (Nearest Neighbor and Sweep)
      with improvement heuristics (2-opt), the solution balances computational efficiency
      and optimization quality.
    explanation_for_ai_agents: >
      The algorithms are designed with modularity in mind, enabling their integration into
      a broader logistics framework. Agents can call specific algorithms based on input size,
      complexity, or optimization goals. Algorithms are built to accept preprocessed data
      from the pipeline and provide actionable outputs like optimized routes or ETAs.
